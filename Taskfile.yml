version: '3'

tasks:

  install:
    desc: Install Pre-requisites
    summary: Installs the various tools needed to work with this project
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.64.8
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install gotest.tools/gotestsum@latest
      - brew install mdformat

  format:
    desc: Run 'goimports' to format go imports
    summary: Runs goimports on all files with -local support, can also replace gofmt
    cmds:
      - goimports -local github.com/vallieres/crawl-n-indexnow -w .
      - go mod tidy
      - gofumpt -l -w .
      - mdformat .

  lint:
    desc: Code Linting
    summary: Lint the project files with golangci-lint
    cmds:
      - golangci-lint run -c .golangci.yml

  test:
    desc: Run the tests
    summary: Runs the tests
    cmds:
      - gotestsum ./...

  release:
    desc: Releases a new version
    summary: Release a new version of Crawl n' Index
    silent: true
    cmds:
      - |
        echo -e "\nℹ️  This command will prompt you to provide the Git tag and Release name \n   in order to release a new version of Crawl n' IndexNow.\n"
        LATEST=$(git describe --tags $(git rev-list --tags --max-count=1))
        BRANCH=$(git symbolic-ref --short -q HEAD)
        if [ "$BRANCH" != "main" ]; then
          echo -e "\n❗Tags should be created on an up-to-date main branch!❗"
          exit
        fi
        echo -e "→ Latest tag: $LATEST \n"
        echo "Enter the new tag (include the "v"):"
        read TAG;
        echo "Enter the release name:"
        read NAME;
        echo -e "\nYou typed: ${TAG}, ${NAME} \nType Enter to continue or Ctrl+D to exit...";
        read NIL;
        echo -e "→ Creating the Git tag ${TAG}..."
        git tag -a ${TAG} -m "${NAME}"
        git push origin ${TAG}
        echo -e "\n→ Generating GoReleaser release..."
        goreleaser release --clean
        echo -e "\n✅ Completed!"
